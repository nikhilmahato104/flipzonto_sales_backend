<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Fetched Orders</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: #f2f2f2;
      padding: 30px;
    }
    h1 {
      text-align: center;
      margin-bottom: 30px;
      color: #333;
    }
    .refresh-btn {
      display: inline-block;
      margin: 10px;
      padding: 10px 20px;
      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
    }

    .refresh-btn-page {
      display: inline-block;
      margin: 10px;
      padding: 10px 20px;

      background-color: #007BFF;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      position: fixed;
    }
    .order {
      background: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      margin-bottom: 30px;
      padding: 20px;
      transition: background-color 0.3s ease;
    }
    .order.shipped {
      background-color: #d4edda;
    }
    .order-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
    .shop-info {
      flex: 1;
    }
    .shop-image {
      width: 150px;
      height: auto;
      border-radius: 8px;
      margin-left: 20px;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: center;
    }
    th {
      background-color: #4CAF50;
      color: white;
    }
    td img {
      width: 80px;
      height: auto;
      border-radius: 4px;
    }
    .toggle-btn {
      margin-top: 15px;
      margin-right: 10px;
      padding: 8px 16px;
      background-color: #28a745;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .no-orders {
      text-align: center;
      font-size: 20px;
      color: #888;
    }
    .filters {
      text-align: center;
      margin-bottom: 20px;
    }
    .filters label,
    .filters select,
    .filters input {
      margin: 0 5px;
      font-size: 16px;
    }
  </style>

  <!-- jsPDF Library -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/qrcode/build/qrcode.min.js"></script>
  <script src="fonts/noto-sans-devanagari-normal.js"></script>

<script src="NotoSansDevanagari.js"></script>

  <script>

function numberToWords(num) {
  const a = ['', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten',
    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];
  const b = ['', '', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'];

  function convert(n) {
    if (n < 20) return a[n];
    if (n < 100) return b[Math.floor(n / 10)] + (n % 10 ? ' ' + a[n % 10] : '');
    if (n < 1000) return a[Math.floor(n / 100)] + ' hundred' + (n % 100 ? ' ' + convert(n % 100) : '');
    if (n < 100000) return convert(Math.floor(n / 1000)) + ' thousand' + (n % 1000 ? ' ' + convert(n % 1000) : '');
    if (n < 10000000) return convert(Math.floor(n / 100000)) + ' lakh' + (n % 100000 ? ' ' + convert(n % 100000) : '');
    return convert(Math.floor(n / 10000000)) + ' crore' + (n % 10000000 ? ' ' + convert(n % 10000000) : '');
  }

  const rupees = Math.floor(num);
  const paisa = Math.round((num - rupees) * 100);
  let words = convert(rupees) + ' rupees';
  if (paisa > 0) words += ' and ' + convert(paisa) + ' paisa';
  return words + ' only';
}



    function refreshPage() {
      location.reload();
    }

    async function toggleShipped(orderId) {
      try {
        const response = await fetch('/toggle-shipped/' + orderId, { method: 'POST' });
        if (response.ok) {
          location.reload();
        } else {
          alert('Error toggling shipped status');
        }
      } catch (err) {
        console.error(err);
        alert('Server error');
      }
    }

    function applyFilters() {
      const dateFilter = document.getElementById('filterDate').value;
      const shippedFilter = document.getElementById('filterShipped').value;
      const orders = document.querySelectorAll('.order');

      orders.forEach(order => {
        const orderDate = order.getAttribute('data-date');
        const isShipped = order.getAttribute('data-shipped');
        const dateMatch = !dateFilter || orderDate === dateFilter;
        const shippedMatch = !shippedFilter || isShipped === shippedFilter;
        order.style.display = (dateMatch && shippedMatch) ? '' : 'none';
      });
    }



























// async function downloadInvoice(orderId) {
//   const { jsPDF } = window.jspdf;

//   if (typeof QRCode === 'undefined') {
//     alert('QRCode library not loaded.');
//     return;
//   }

//   const orderEl = document.getElementById(`order-${orderId}`);
//   if (!orderEl) {
//     console.error(`Order element with ID 'order-${orderId}' not found.`);
//     return;
//   }

//   const doc = new jsPDF({ unit: 'pt', format: 'a4' });
//   const margin = 40;
//   const pageWidth = doc.internal.pageSize.getWidth();
//   const pageHeight = doc.internal.pageSize.getHeight();
//   let y = margin;

//   // Set default consistent font
//   const defaultFont = 'Helvetica';
//   const defaultFontSize = 11;
//   doc.setFont(defaultFont, 'normal');
//   doc.setFontSize(defaultFontSize);

//   doc.setDrawColor(0);
//   doc.setLineWidth(1.5);
//   doc.rect(margin - 10, margin - 10, pageWidth - margin * 2 + 20, pageHeight - margin * 2 + 20);

//   const qrSize = 70;
//   const rows = Array.from(orderEl.querySelectorAll('tbody tr'));
//   let totalQty = 0, totalPrice = 0;

//   rows.forEach(row => {
//     const cells = row.querySelectorAll('td');
//     const rate = parseFloat(cells[2]?.textContent.replace(/[₹,]/g, '') || '0');
//     const qty = parseFloat(cells[3]?.textContent || '0');
//     totalQty += qty;
//     totalPrice += rate * qty;
//   });

//   const qrContent = `Order ID: ${orderId}\nTotal Items: ${totalQty}\nTotal Price: ₹${totalPrice.toFixed(2)}`;
//   const qrDataUrl = await QRCode.toDataURL(qrContent, { margin: 1, width: qrSize });
//   doc.addImage(qrDataUrl, 'PNG', margin, y, qrSize, qrSize);

//   const shopName = orderEl.querySelector('h2')?.textContent.replace('Shop: ', '').trim() || 'Invoice';
//   doc.setFontSize(18);
//   doc.text('FlipZonto Invoice', margin + qrSize + 20, y + 20);
//   doc.setFontSize(12);
//   doc.text(`Invoice Number: ${orderId}`, margin + qrSize + 20, y + 40);
//   doc.setFontSize(10);
//   doc.text('Thank you for shopping with FlipZonto', margin + qrSize + 20, y + 55);
//   doc.setFontSize(defaultFontSize);
//   y += qrSize + 40;

//   function drawLabelValue(label, value, startY) {
//     doc.setFont(defaultFont, 'normal');
//     doc.setFontSize(defaultFontSize);

//     doc.text(`${label}:`, margin, startY);

//     const valueX = margin + 150;
//     const availableWidthForValue = pageWidth - valueX - margin;
//     const splitValue = doc.splitTextToSize(value, availableWidthForValue);
//     doc.text(splitValue, valueX, startY);

//     return splitValue.length * 15;
//   }

//   const owner = orderEl.querySelector('.shop-info p:nth-of-type(1)')?.textContent.replace('Owner: ', '') || '';
//   const contact = orderEl.querySelector('.shop-info p:nth-of-type(2)')?.textContent.replace('Contact: ', '') || '';
//   const rawAddress = orderEl.querySelector('.shop-info p:nth-of-type(3)')?.textContent.replace('Address: ', '') || '';
//   const region = orderEl.querySelector('.shop-info p:nth-of-type(4)')?.textContent.replace('Region: ', '') || '';
//   const mapLink = orderEl.querySelector('.shop-info p:nth-of-type(5) a')?.href || '';
//   const salesmanText = orderEl.querySelector('.shop-info p:nth-of-type(6)')?.textContent || '';
//   const comment = orderEl.querySelector('.shop-info p:nth-of-type(7)')?.textContent.replace('Comment: ', '') || '';
//   const date = orderEl.querySelector('.shop-info p:nth-of-type(8)')?.textContent.replace('Order Date: ', '') || '';
//   const status = orderEl.querySelector('.shop-info p:nth-of-type(9)')?.textContent.replace('Status:', '') || '';

//   y += drawLabelValue('Buyer (Shop) Name', shopName, y);
//   y += drawLabelValue('Owner', owner, y);
//   y += drawLabelValue('Contact', contact, y);

//   // ✅ ADDRESS in two lines with same font
//   doc.setFont(defaultFont, 'normal');
//   doc.setFontSize(defaultFontSize);
//   doc.text('Address:', margin, y);
//   const addressX = margin + 150;
//   const wordsArray = rawAddress.trim().split(/\s+/);
//   const firstLine = wordsArray.slice(0, 3).join(' ');
//   const secondLine = wordsArray.slice(3).join(' ');

//   doc.text(firstLine, addressX, y);
//   doc.text(secondLine, addressX, y + 15);
//   y += 30;

//   y += drawLabelValue('Region', region, y);

//   if (mapLink) {
//     doc.text('Location:', margin, y);
//     doc.setTextColor(0, 0, 255);
//     doc.textWithLink('Google Maps Link', addressX, y, { url: mapLink });
//     doc.setTextColor(0, 0, 0);
//     y += 20;
//   }

//   y += drawLabelValue('Salesman Info', salesmanText, y);
//   y += drawLabelValue('Comment', comment, y);
//   y += drawLabelValue('Order Date', date, y);
//   y += drawLabelValue('Status', status, y);

//   y += 20;

//   // Table
//   const tableX = margin;
//   let tableY = y;
//   const colWidths = [180, 100, 70, 70, 80];
//   const headers = ['Item Name', 'Category', 'Rate (Rs)', 'Quantity', 'Total (Rs)'];
//   const cellPadding = 5;

//   doc.setFillColor(230);
//   doc.rect(tableX, tableY, colWidths.reduce((a, b) => a + b, 0), 25, 'F');
//   doc.setFontSize(12);
//   let currentX = tableX;
//   headers.forEach((header, i) => {
//     doc.text(header, currentX + colWidths[i] / 2, tableY + 17, { align: 'center' });
//     currentX += colWidths[i];
//   });

//   y = tableY + 25;
//   doc.setFontSize(defaultFontSize);
//   const rowHeight = 25;
//   let subtotal = 0;

//   rows.forEach((row) => {
//     if (y + rowHeight > pageHeight - margin) {
//       doc.addPage();
//       y = margin;

//       doc.setFillColor(230);
//       doc.rect(tableX, y, colWidths.reduce((a, b) => a + b, 0), 25, 'F');
//       doc.setFontSize(12);
//       let currentX = tableX;
//       headers.forEach((header, i) => {
//         doc.text(header, currentX + colWidths[i] / 2, y + 17, { align: 'center' });
//         currentX += colWidths[i];
//       });

//       y += 25;
//       doc.setFontSize(defaultFontSize);
//     }

//     const cells = row.querySelectorAll('td');
//     const name = cells[0]?.textContent || '';
//     const category = cells[1]?.textContent || '';
//     const rate = parseFloat(cells[2]?.textContent.replace(/[₹,]/g, '') || '0');
//     const qty = parseFloat(cells[3]?.textContent || '0');
//     const total = rate * qty;
//     subtotal += total;

//     currentX = tableX;
//     [name, category, rate.toFixed(2), qty.toString(), total.toFixed(2)].forEach((text, i) => {
//       const cellWidth = colWidths[i];
//       const cellCenter = currentX + cellWidth / 2;
//       const splitLines = doc.splitTextToSize(text, cellWidth - cellPadding * 2);
//       if (splitLines.length > 1) {
//         doc.text(splitLines, currentX + cellPadding, y + 15);
//       } else {
//         doc.text(text, cellCenter, y + 15, { align: 'center' });
//       }
//       currentX += cellWidth;
//     });

//     y += rowHeight;
//   });

//   y += 10;

//   const subtotalText = `Subtotal: ${subtotal.toFixed(2)}`;
//   const textHeight = 20;
//   doc.setFontSize(13);
//   doc.setFillColor(240, 240, 240);
//   doc.rect(margin - 9, y - 5, pageWidth - margin * 2 + 18, textHeight, 'F');
//   doc.setTextColor(0, 0, 0);
//   doc.text(subtotalText, pageWidth / 2, y + 10, { align: 'center' });
//   y += textHeight;

//   const words = numberToWords(subtotal).replace(/\b\w/g, l => l.toUpperCase());
//   doc.setFontSize(defaultFontSize);
//   doc.setFillColor(240, 240, 240);
//   doc.rect(margin - 8, y - 5, pageWidth - margin * 2 + 16, textHeight, 'F');
//   doc.setTextColor(0, 0, 0);
//   doc.text(words, pageWidth / 2, y + 10, { align: 'center' });

//   y += textHeight;

//   const fileName = `${shopName.replace(/\s+/g, '_')}_${orderId}.pdf`;
//   doc.save(fileName);
// }









async function downloadInvoice(orderId) {
  const { jsPDF } = window.jspdf;

  if (typeof QRCode === 'undefined') {
    alert('QRCode library not loaded.');
    return;
  }

  const orderEl = document.getElementById(`order-${orderId}`);
  if (!orderEl) {
    console.error(`Order element with ID 'order-${orderId}' not found.`);
    return;
  }

  const doc = new jsPDF({ unit: 'pt', format: 'a4' });
  const margin = 40;
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let y = margin;

  const defaultFont = 'Helvetica';
  const defaultFontSize = 11;
  doc.setFont(defaultFont, 'normal');
  doc.setFontSize(defaultFontSize);

  doc.setDrawColor(0);
  doc.setLineWidth(1.5);
  doc.rect(margin - 10, margin - 10, pageWidth - margin * 2 + 20, pageHeight - margin * 2 + 20);

  const qrSize = 70;
  const rows = Array.from(orderEl.querySelectorAll('tbody tr'));
  let totalQty = 0, totalPrice = 0;

  rows.forEach(row => {
    const cells = row.querySelectorAll('td');
    const rate = parseFloat(cells[2]?.textContent.replace(/[₹,]/g, '') || '0');
    const qty = parseFloat(cells[3]?.textContent || '0');
    totalQty += qty;
    totalPrice += rate * qty;
  });

  const qrContent = `Order ID: ${orderId}\nTotal Items: ${totalQty}\nTotal Price: ₹${totalPrice.toFixed(2)}`;
  const qrDataUrl = await QRCode.toDataURL(qrContent, { margin: 1, width: qrSize });
  doc.addImage(qrDataUrl, 'PNG', margin, y, qrSize, qrSize);

  const shopName = orderEl.querySelector('h2')?.textContent.replace('Shop: ', '').trim() || 'Invoice';
  doc.setFontSize(18);
  doc.text('FlipZonto Invoice', margin + qrSize + 20, y + 20);
  doc.setFontSize(12);
  doc.text(`Invoice Number: ${orderId}`, margin + qrSize + 20, y + 40);
  doc.setFontSize(10);
  doc.text('Thank you for shopping with FlipZonto', margin + qrSize + 20, y + 55);
  doc.setFontSize(defaultFontSize);
  y += qrSize + 40;

  function drawLabelValue(label, value, startY) {
    doc.setFont(defaultFont, 'normal');
    doc.setFontSize(defaultFontSize);
    doc.text(`${label}:`, margin, startY);

    const valueX = margin + 150;
    const availableWidthForValue = pageWidth - valueX - margin;
    const splitValue = doc.splitTextToSize(value, availableWidthForValue);
    doc.text(splitValue, valueX, startY);

    return splitValue.length * 15;
  }

  const owner = orderEl.querySelector('.shop-info p:nth-of-type(1)')?.textContent.replace('Owner: ', '') || '';
  const contact = orderEl.querySelector('.shop-info p:nth-of-type(2)')?.textContent.replace('Contact: ', '') || '';
  const rawAddress = orderEl.querySelector('.shop-info p:nth-of-type(3)')?.textContent.replace('Address: ', '') || '';
  const region = orderEl.querySelector('.shop-info p:nth-of-type(4)')?.textContent.replace('Region: ', '') || '';
  const mapLink = orderEl.querySelector('.shop-info p:nth-of-type(5) a')?.href || '';
  const salesmanText = orderEl.querySelector('.shop-info p:nth-of-type(6)')?.textContent || '';
  const comment = orderEl.querySelector('.shop-info p:nth-of-type(7)')?.textContent.replace('Comment: ', '') || '';
  const date = orderEl.querySelector('.shop-info p:nth-of-type(8)')?.textContent.replace('Order Date: ', '') || '';
  const status = orderEl.querySelector('.shop-info p:nth-of-type(9)')?.textContent.replace('Status:', '') || '';

  y += drawLabelValue('Buyer (Shop) Name', shopName, y);
  y += drawLabelValue('Owner', owner, y);
  y += drawLabelValue('Contact', contact, y);

  // ✅ Address - Fixed font and cleaned characters
  doc.setFont(defaultFont, 'normal');
  doc.setFontSize(defaultFontSize);
  doc.text('Address:', margin, y);
  const addressX = margin + 150;
  const wordsArray = rawAddress.trim().split(/\s+/);
  const firstLine = wordsArray.slice(0, 3).join(' ');
  const secondLine = wordsArray.slice(3).join(' ');
  const cleanFirstLine = firstLine.replace(/[^\x00-\x7F]/g, '');
  const cleanSecondLine = secondLine.replace(/[^\x00-\x7F]/g, '');
  doc.text(cleanFirstLine, addressX, y);
  doc.text(cleanSecondLine, addressX, y + 15);
  y += 30;

  y += drawLabelValue('Region', region, y);

  if (mapLink) {
    doc.text('Location:', margin, y);
    doc.setTextColor(0, 0, 255);
    doc.textWithLink('Google Maps Link', addressX, y, { url: mapLink });
    doc.setTextColor(0, 0, 0);
    y += 20;
  }

  y += drawLabelValue('Salesman Info', salesmanText, y);
  y += drawLabelValue('Comment', comment, y);
  y += drawLabelValue('Order Date', date, y);
  // y += drawLabelValue('Status', status, y);

  y += 20;

  // Table Headers
  const tableX = margin;
  let tableY = y;
  const colWidths = [180, 100, 70, 70, 80];
  const headers = ['Item Name', 'Category', 'Rate (Rs)', 'Quantity', 'Total (Rs)'];
  const cellPadding = 5;

  doc.setFillColor(230);
  doc.rect(tableX, tableY, colWidths.reduce((a, b) => a + b, 0), 25, 'F');
  doc.setFontSize(12);
  let currentX = tableX;
  headers.forEach((header, i) => {
    doc.text(header, currentX + colWidths[i] / 2, tableY + 17, { align: 'center' });
    currentX += colWidths[i];
  });

  y = tableY + 25;
  doc.setFontSize(defaultFontSize);
  const rowHeight = 25;
  let subtotal = 0;

  rows.forEach((row) => {
    if (y + rowHeight > pageHeight - margin) {
      doc.addPage();
      y = margin;

      doc.setFillColor(230);
      doc.rect(tableX, y, colWidths.reduce((a, b) => a + b, 0), 25, 'F');
      doc.setFontSize(12);
      let currentX = tableX;
      headers.forEach((header, i) => {
        doc.text(header, currentX + colWidths[i] / 2, y + 17, { align: 'center' });
        currentX += colWidths[i];
      });

      y += 25;
      doc.setFontSize(defaultFontSize);
    }

    const cells = row.querySelectorAll('td');
    const name = cells[0]?.textContent || '';
    const category = cells[1]?.textContent || '';
    const rate = parseFloat(cells[2]?.textContent.replace(/[₹,]/g, '') || '0');
    const qty = parseFloat(cells[3]?.textContent || '0');
    const total = rate * qty;
    subtotal += total;

    currentX = tableX;
    [name, category, rate.toFixed(2), qty.toString(), total.toFixed(2)].forEach((text, i) => {
      const cellWidth = colWidths[i];
      const cellCenter = currentX + cellWidth / 2;
      const splitLines = doc.splitTextToSize(text, cellWidth - cellPadding * 2);
      if (splitLines.length > 1) {
        doc.text(splitLines, currentX + cellPadding, y + 15);
      } else {
        doc.text(text, cellCenter, y + 15, { align: 'center' });
      }
      currentX += cellWidth;
    });

    y += rowHeight;
  });

  y += 10;

  const subtotalText = `Subtotal: ${subtotal.toFixed(2)}`;
  const textHeight = 20;
  doc.setFontSize(13);
  doc.setFillColor(240, 240, 240);
  doc.rect(margin - 9, y - 5, pageWidth - margin * 2 + 18, textHeight, 'F');
  doc.setTextColor(0, 0, 0);
  doc.text(subtotalText, pageWidth / 2, y + 10, { align: 'center' });
  y += textHeight;

  const words = numberToWords(subtotal).replace(/\b\w/g, l => l.toUpperCase());
  doc.setFontSize(defaultFontSize);
  doc.setFillColor(240, 240, 240);
  doc.rect(margin - 8, y - 5, pageWidth - margin * 2 + 16, textHeight, 'F');
  doc.setTextColor(0, 0, 0);
  doc.text(words, pageWidth / 2, y + 10, { align: 'center' });

  y += textHeight;

  const fileName = `${shopName.replace(/\s+/g, '_')}_${orderId}.pdf`;
  doc.save(fileName);
}


















</script>





</head>
<body>
    <button class="refresh-btn-page" onclick="refreshPage()">Refresh Page 🔄</button>


  <h1> All Order details Orders</h1>

  <div class="filters">
    <label for="filterDate">Order Date:</label>
    <input type="date" id="filterDate">

    <label for="filterShipped">Shipped:</label>
    <select id="filterShipped">
      <option value="">All</option>
      <option value="true">Shipped</option>
      <option value="false">Not Shipped</option>
    </select>

    <button class="refresh-btn" onclick="applyFilters()">Apply Filters 🔍</button>
    <button class="refresh-btn" onclick="refreshPage()">Reset Filters 🔄</button>
  </div>

  <% if (orders.length === 0) { %>
    <p class="no-orders">No orders found.</p>
  <% } else { %>
    <% orders.slice().reverse().forEach(order => { %>

      <div class="order <%= order.shipped ? 'shipped' : '' %>"
           id="order-<%= order._id %>"
           data-date="<%= order.orderDate ? order.orderDate.toISOString().split('T')[0] : '' %>"
           data-shipped="<%= order.shipped %>">

        <div class="order-header">
          <div class="shop-info">
            <h2>Shop: <%= order.shopDetails.shopName %></h2>
            <p>Owner: <%= order.shopDetails.shopOwnerName %></p>
            <p>Contact: <%= order.shopDetails.contact %></p>
            <!-- <p>Address: <%= order.shopDetails.address %>, <%= order.shopDetails.region %> - <%= order.shopDetails.location %></p> -->
            <p>Address: <%= order.shopDetails.address %> </p>
            <p>Region: <%= order.shopDetails.region %></p>
            <p>Google Maps: <a href="<%= order.shopDetails.location %>" target="_blank">View on Maps</a></p>

            <p>Salesman: <%= order.salesmanName %> (Contact: <%= order.salesmanContact %>)</p>
            <p>Comment: <%= order.comment %></p>
            <p>Order Date: <%= order.orderDate ? order.orderDate.toDateString() : '' %></p>
            <p>Status: <strong><%= order.shipped ? 'Shipped ✅' : 'Not Shipped ❌' %></strong></p>
          </div>
          <div>
            <img class="shop-image" src="<%= order.shopDetails.imageUrl %>" alt="Shop Image">
          </div>
        </div>

        <h3>Cart Items:</h3>
        <table>
          <thead>
            <tr>
              <th>Item Name</th>
              <th>Category</th>
              <th>Rate (₹)</th>
              <th>Quantity</th>
              <th>Image</th>
            </tr>
          </thead>
          <tbody>
            <% order.cartItems.forEach(item => { %>
              <tr>
                <td><%= item.name %></td>
                <td><%= item.category %></td>
                <td><%= item.rate %></td>
                <td><%= item.quantity %></td>
                <td><img src="<%= item.image %>" alt="<%= item.name %>"></td>
              </tr>
            <% }) %>
          </tbody>
        </table>

        <button class="toggle-btn" onclick="toggleShipped('<%= order._id %>')">Toggle Shipped</button>
        <button class="toggle-btn" onclick="downloadInvoice('<%= order._id %>')">Download Invoice 🧾</button>
      </div>
    <% }) %>
  <% } %>



  
  <script>
    function refreshPage() {
      location.reload();
    }
  </script>
</body>
</html>
